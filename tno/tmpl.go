package main

var tmpl = `
// Code generated by "gno "; DO NOT EDIT.

package {{.Package}}

import "github.com/didi/gendry/builder"

type internal{{.TableStruct}} struct {
}

func (internal{{.TableStruct}}) schema() string {
	return {{.TableStruct}}{}.schema()
}

func (internal{{.TableStruct}}) fields() []string {
	return {{.TableFields}}
}

func (internal *internal{{.TableStruct}}) Get{{.TableStruct}}ByID(db DbInterface, id int64) (_v {{.TableStruct}}, err error) {
	where := map[string]interface{}{
		"I_ID": id,
	}
	query, args, err := builder.BuildSelect(internal.schema(), where, internal.fields())
	if err != nil {
		return
	}

	err = db.Get(&_v, query, args...)
	return
}

func (internal *internal{{.TableStruct}}) Get{{.TableStruct}}ByIDs(db DbInterface, ids []int64) (_vs []{{.TableStruct}}, err error) {
	where := map[string]interface{}{
		"I_ID in": ids,
	}
	query, args, err := builder.BuildSelect(internal.schema(), where, internal.fields())
	if err != nil {
		return
	}

	err = db.Select(&_vs, query, args...)
	return
}

func (internal *internal{{.TableStruct}}) Insert(db DbInterface, _v {{.TableStruct}}) (_us []{{.TableStruct}}, err error) {
	data := map[string]interface{}{
		{{.TableMap}}
	}

	query, args, err := builder.BuildInsert(internal.schema(), []map[string]interface{}{data})
	if err != nil {
		return
	}

	_, err = db.Exec(query, args...)
	return
}

func (internal *internal{{.TableStruct}}) Delete(db DbInterface, id int64) (err error) {
	where := map[string]interface{}{
		"I_ID": id,
	}

	query, args, err := builder.BuildDelete(internal.schema(), where)
	if err != nil {
		return
	}

	_, err = db.Exec(query, args...)
	return
}

`
